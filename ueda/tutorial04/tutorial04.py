# -*- coding: utf-8 -*-
"""Tutorial04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HMV-Ijll8xZvC4vCA9LOrctTDQnEVcpL
"""

!git clone https://github.com/neubig/nlptutorial.git #gitからCloneする

import random
import math
from collections import defaultdict

def HMM_train(file):
  emit = defaultdict(lambda: 0)
  transition = defaultdict(lambda: 0)
  context = defaultdict(lambda: 0)
  model = open("/content/model_file.txt", "w", encoding="utf-8")
  for line in file:
    previous = "<s>"
    context[previous]+=1
    wordtags = line.strip().split(" ")
    for wordtag in wordtags:
      word, tag = wordtag.split("_")
      transition[previous+" "+tag]+=1
      context[tag]+=1
      emit[tag+" "+word]+=1
      previous = tag
    transition[previous+" </s>"]+=1
  for key, value in transition.items():
    prveious, word = key.split(" ")
    model.write("T "+key+" "+str(value/context[prveious])+"\n")
  for key, value in emit.items():
    previous, word = key.split()
    model.write("E "+key+" "+str(value/context[previous])+"\n")

def load_model(model_file):
  transition = {}
  emission = defaultdict(lambda: 0)
  possible_tags = {}
  for line in model_file:
    types, context, word, prob = line.strip().split(" ")
    possible_tags[context] = 1
    if types == "T":
      transition[context+" "+word] = prob
    else:
      emission[context+" "+word] = prob
  return transition, emission, possible_tags

def Viterbi(model_file, test_file):
  answer = open("/content/my_answer.pos", "w", encoding="utf-8")
  transition, emission, possible_tags = load_model(model_file)

  lambd, V = 0.95, 1000000
  for line in test_file:
    words = line.strip().split(" ")
    words.append("</s>")
    l = len(words)
    best_edge = {}
    best_score = {}
    best_edge["0 <s>"] = None
    best_score["0 <s>"] = 0
    for i in range(0, l):
      for prev in possible_tags:
        for next in possible_tags:
          if str(i)+" "+prev in best_score and prev+" "+next in transition:
            score = best_score[str(i)+" "+prev] - math.log(float(transition[prev+" "+next])) - math.log(lambd*float(emission[next+" "+words[i]])+(1-lambd)/V)
            if str(i+1)+" "+next not in best_score or best_score[str(i+1)+" "+next] > score:
              best_score[str(i+1)+" "+next] = score
              best_edge[str(i+1)+" "+next] = str(i)+" "+prev
        if str(i)+" "+prev in best_score and  prev+" </s>" in transition:
          score = best_score[str(i)+" "+prev] - math.log(float(transition[ prev+" </s>"])) - math.log(lambd*float(emission[ "</s> "+words[i]])+(1-lambd)/V)
          if str(i+1)+" </s>" not in best_score or best_score[str(i+1)+" </s>"] > score:
            best_score[str(i+1)+" </s>"] = score
            best_edge[str(i+1)+" </s>"] = str(i)+" "+prev
    tags = []
    next_edge = best_edge[str(l)+" </s>"] 
    while next_edge not in "0 <s>":
      position, tag = next_edge.split(" ")
      tags.append(tag)
      next_edge = best_edge[next_edge]
    tags.reverse()
    answer.write(' '.join(tags)+'\n')

#必要なファイルを読みこみ
train_input = open('/content/nlptutorial/test/05-train-input.txt', encoding="utf-8")
test_input = open('/content/nlptutorial/test/05-test-input.txt', encoding="utf-8")

#プログラムのテスト
HMM_train(train_input)
model_file = open("/content/model_file.txt", encoding="utf-8")
Viterbi(model_file, test_input)

#演習問題
train_input = open('/content/nlptutorial/data/wiki-en-train.norm_pos', encoding="utf-8")
test_input = open('/content/nlptutorial/data/wiki-en-test.norm', encoding="utf-8")
HMM_train(train_input)
model_file = open("/content/model_file.txt", encoding="utf-8")
Viterbi(model_file, test_input)

"""Accuracy: 90.82% (4144/4563)

Most common mistakes:
NNS --> NN      45
NN --> JJ       27
NNP --> NN      22
JJ --> DT       22
VBN --> NN      12
JJ --> NN       12
NN --> IN       11
NN --> DT       10
NNP --> JJ      8
VBN --> JJ      7

Sent Accuracy: 17.86% (15/84)
Word Prec: 89.63% (2066/2305)
Word Rec: 89.55% (2066/2307)
F-meas: 89.59%
Bound Accuracy: 94.54% (3050/3226)
"""